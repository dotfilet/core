#!/usr/bin/env zsh

# Logging

autoload -U colors
colors

color_format() (
  string="${@}"
  stack=(default)
  
  while [[ "${string}" =~ '{{([^}]+)}}' ]]; do
    echo -n "${string:0:($MBEGIN - 1)}"

    color="${match[1]}"
    if [[ "${color}" == "/" ]]; then
      current="${stack[-1]}"
      shift -p stack
      if [[ "${current}" == "dim" ]]; then
        echo -n "[22m"
      else
        color="${stack[-1]}"
      fi
    else
      stack+=("${color}")
    fi

    if [[ "${color}" == "dim" ]]; then
      echo -n "[2m"
    else
      echo -n "${fg[$color]}"
    fi

    string="${string:$MEND}"
  done
  echo -n "${string}"
)

log() (
  echo $(color_format "$@[0m") >&2
)

log_debug() (
  if [[ ! -v FILET_VERBOSE ]]; then return; fi
  echo "{{dim}}$@"
)

log_warn() (
  log "{{yellow}}@" 
)

log_error() (
  log "{{red}}$@" 
)

fail() (
  log_error "$@"
  return 1
)
# Script Environment

import() {
  repository="${1}"

  if [[ "${repository}" =~ ^github: ]]; then
    import_git "https://github.com/${repository:7}"
  elif [[ -d "${repository}" ]]; then
    import_path "${repository}"
  else
    fail "Not able to resolve repository {{yellow}}${repository}{{/}} to import"
  fi
}

import_git() {
  url="${1}"
  relative_path="${url:8}" # assuming https://â€¦

  cache_dir="${FILET_STATE_DIR}/repositories/${relative_path}"

  if [[ -d "${cache_dir}" ]]; then
    # TODO: Make this an explicit command to sync?
    #
    # git -C "${cache_dir}" pull --depth 1 --rebase --quiet
  else
    log "Caching ${url} to ${cache_dir}â€¦"

    mkdir -p "${cache_dir:h}"
    git clone --depth 1 "${url}" "${cache_dir}"
  fi

  import_path "${cache_dir}"
}

import_path() {
  repository_path="${1:A}"
  log_debug "import ${repository_path}"

  if [[ ! -d "${repository_path}" ]]; then
    fail "Unable to import unknown directory {{magenta}}${repository_path}{{/}} ({{magenta}}${repository_path}{{/}})"
  fi

  
  FILET_REPOSITORIES+=("${repository_path}")
}

use() {
  module="${1}"
  variable_name="${module:u:gs/-/_/}"

  # Only use each module once.
  env_flag="FILET_MODULE_LOADED_${variable_name}"
  if (( ${(P)+env_flag} )); then return; fi
  eval "${env_flag}=yes"
  log_debug "use ${module}"

  module_path=$(resolve_module "${module}")
  eval "FILET_MODULE_ROOT_${variable_name}=${module_path:h}"

  evaluate_script "${module_path}"
}

resolve_module() {
  module="${1}"

  for repository in "${FILET_REPOSITORIES[@]}"; do
    if [[ -f "${repository}"/"${module}"/module.filet ]]; then
      echo "${repository}"/"${module}"/module.filet
      return 0
    elif [[ -f "${repository}"/"${module}".filet ]]; then
      echo "${repository}"/"${module}".filet
      return 0
    fi
  done

  log_error "Unable to locate module {{yellow}}${module}{{/}} via search paths:"
  log_error
  for repository in "${FILET_REPOSITORIES[@]}"; do
    log_error "  ${repository}"
  done
  return 1
}

git_sync() {
  destination="${1:A}"
  url="${2}"
  # TODO
  # refspec="${3}"
  log_debug "git_sync ${url} ${destination}"

  if [[ -d "${destination}"/.git ]]; then
    git -C "${destination}" pull --depth 1 --rebase --quiet
  else
    git clone --depth 1 "${url}" "${destination}"
  fi  
}

evaluate_script() {
  script="${1}"

  if [[ ! -f "${script}" ]]; then
    fail "Can't locate filet script {{magenta}}${script}{{/}} ({{magenta}}${script:A}{{/}})"
  fi
  
  if [[ ! -v FILET_ROOT_SCRIPT ]]; then
    FILET_ROOT_SCRIPT="${script:A}"
    FILET_ROOT_DIR="${script:A:h}"
    FILET_STATE_DIR="${FILET_ROOT_DIR}/.filet"
    FILET_REPOSITORIES=()
  fi

  previous_module_root="${FILET_CURRENT_MODULE_ROOT}"
  FILET_CURRENT_MODULE_ROOT="${script:A:h}"

  source "${script}"

  FILET_CURRENT_MODULE_ROOT="${previous_module_root}"
}

# Command: apply

command_apply_help() (
  log "Usage: {{cyan}}filet{{/}} {{yellow}}apply{{/}} {{magenta}}file.filet{{/}}"
)

command_apply_main() (
  root_script="${1}"
  if [[ "${root_script}" == "" ]]; then
    command_apply_help
    return 1
  fi

  cd "${root_script:h}"
  evaluate_script "${root_script}"
)
# Command: help

command_help_main() (
  command="${1}"

  if [[ "${command}" == "" ]]; then
    default_help
  elif ! is_function "command_${command}_main"; then
    log_error "Unknown command: {{yellow}}${command}{{/}}"
    log
    default_help
  elif ! is_function "command_${command}_help"; then
    log_error "The {{yellow}}${command}{{/}} command failed to implement command_${command}_help"
    log
    default_help
  else
    "command_${command}_help"
  fi

  exit 1
)

default_help() (
  log "Usage: {{cyan}}filet{{/}} {{yellow}}command{{/}}"
)

# Entry Point

main() (
  log

  positional=()
  flags=()
  for argument in "${@}"; do
    if [[ "${argument}" =~ ^-+ ]]; then
      flags+=("${argument}")
    else
      positional+=("${argument}")
    fi
  done

  if (( $flags[(Ie)--help] )) || (( $flags[(Ie)-h] )) || ! is_function "command_${positional[1]}_main"; then
    if [[ "${positional[1]}" != "help" ]]; then
      positional=(help "${positional[@]}")
    fi
  fi
  
  (
    set -e
    "command_${positional[1]}_main" "${positional[@]:1}" "${flags[@]}"
  )
  result=$?

  log

  return $result
)

is_function() (
  typeset -f "${1}" > /dev/null
)

main "$@"
